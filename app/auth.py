# app/auth.py
from flask import Blueprint, render_template, redirect, url_for, flash
from flask_login import login_user, logout_user, login_required
from .extensions import db, login_manager
from .models import User, Role
from .forms import RegisterForm, LoginForm
from flask import request


auth_bp = Blueprint("auth", __name__)

@login_manager.user_loader
def load_user(user_id):
    # id —É –Ω–∞—Å BigInteger, –Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ int –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    return User.query.get(int(user_id))

@auth_bp.route("/register", methods=["GET", "POST"])
def register():
    form = RegisterForm()
    if form.validate_on_submit():
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email/username
        if User.query.filter_by(email=form.email.data).first():
            flash("‚ùå Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            return redirect(url_for("auth.register"))
        if User.query.filter_by(username=form.username.data).first():
            flash("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ")
            return redirect(url_for("auth.register"))

        # —Å–æ–∑–¥–∞—ë–º —é–∑–µ—Ä–∞ –∏ —Ö—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –º–µ—Ç–æ–¥–æ–º –º–æ–¥–µ–ª–∏
        new_user = User(username=form.username.data, email=form.email.data)
        new_user.set_password(form.password.data)

        # —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = student (—á–µ—Ä–µ–∑ —Å–≤—è–∑—å many-to-many)
        role = Role.query.filter_by(name="student").first()
        if role is None:
            role = Role(name="student")
            db.session.add(role)  # —Å–æ–∑–¥–∞–¥–∏–º, –µ—Å–ª–∏ –∑–∞–±—ã–ª–∏ –∑–∞—Å–µ—è—Ç—å
        new_user.roles.append(role)

        db.session.add(new_user)
        db.session.commit()
        flash("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return redirect(url_for("auth.login"))
    return render_template("register.html", form=form)

@auth_bp.route("/login", methods=["GET", "POST"])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and user.check_password(form.password.data):
            login_user(user)
            flash("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥", "success")
            next_page = request.args.get('next')
            # –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ next –µ—Å—Ç—å ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ –Ω–µ–≥–æ, –∏–Ω–∞—á–µ ‚Äî –Ω–∞ index/main
            return redirect(next_page or url_for("main.index"))
        flash("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", "danger")
    return render_template("login.html", form=form)

@auth_bp.route("/logout")
@login_required
def logout():
    logout_user()
    flash("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    return redirect(url_for("index"))
